/* Copyright 2015 Samsung Electronics Co., LTD * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.gearvrf.modelviewer2;import org.gearvrf.GVRAndroidResource;import org.gearvrf.GVRCameraRig;import org.gearvrf.GVRContext;import org.gearvrf.GVRScene;import org.gearvrf.GVRSceneObject;import org.gearvrf.GVRMain;import org.gearvrf.GVRTexture;import org.gearvrf.scene_objects.GVRModelSceneObject;import android.graphics.Color;import android.os.Environment;import android.util.Log;import android.content.Context;import java.io.File;import java.io.IOException;import java.util.ArrayList;public class ModelViewer2Manager extends GVRMain {	private GVRContext mGVRContext;    private GVRModelSceneObject mRoom;    private ArrayList<GVRModelSceneObject> allModels = null;    private final String mRoomPath = "room.fbx";    private int on = 0;    private GVRScene scene;    private int noOfModels = 0;    private int currentModel = 0;    private String sEnvironmentPath = Environment.getExternalStorageDirectory().getPath();    private GVRModelSceneObject loadFbxFile(GVRContext gvrContext, String fbxFile){        try {            return gvrContext.loadModel(fbxFile);        }catch (IOException e) {            e.printStackTrace();        }        return null;    }    private ArrayList<GVRModelSceneObject> loadAllModels(){        ArrayList<GVRModelSceneObject> allModels = new ArrayList<GVRModelSceneObject>();        try {            // Add All the Extensions you want to load            ArrayList<String> extensions = new ArrayList<String>();            extensions.add(".fbx");            extensions.add(".3ds");            // Reads the List of Files from specified folder having extension specified in extensions.            // Please place your models by creating GVRModelViewer2 folder in your internal phone memory            CardReader cRObject = new CardReader(sEnvironmentPath+"/GVRModelViewer2", extensions);            File list[] = cRObject.getModels();            // Adds all the models            for (File file : list){                Log.e("FBx File", file.getAbsolutePath());                allModels.add(mGVRContext.loadModelFromSD("GVRModelViewer2/"+file.getName()));                noOfModels++;            }            return allModels;        }catch (IOException e) {            e.printStackTrace();        }        return null;    }	@Override	public void onInit(GVRContext gvrContext) {		mGVRContext = gvrContext;		scene = gvrContext.getNextMainScene();        mGVRContext.getMainScene().getMainCameraRig().getOwnerObject()               .getTransform().setPosition(0.0f, 0.0f, 0.0f);        // Loads the Room model        mRoom = loadFbxFile(gvrContext, mRoomPath);        // Loads all the model from SD Card        allModels = loadAllModels();        // Set Transformations        mRoom.getTransform().setPosition(0.0f, -0.5f, 0.0f);        // Adding only Room to the scene        scene.addSceneObject(mRoom);    }	@Override	public void onStep() {        try {            // Changes model Every 2 seconds            Thread.sleep(2000);            mRoom.removeChildObject(allModels.get(currentModel));            currentModel = (currentModel+1) % noOfModels;            allModels.get(currentModel).getTransform().setPosition(0.0f, 0.0f, -12.4f);            mRoom.addChildObject(allModels.get(currentModel));            scene.removeSceneObject(mRoom);            scene.addSceneObject(mRoom);        } catch (InterruptedException e) {            Log.e("Model Count", String.valueOf(noOfModels));            e.printStackTrace();        }    }}