/* Copyright 2015 Samsung Electronics Co., LTD * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.gearvrf.modelviewer2;import org.gearvrf.GVRAndroidResource;import org.gearvrf.GVRContext;import org.gearvrf.GVREyePointeeHolder;import org.gearvrf.GVRMeshEyePointee;import org.gearvrf.GVRPicker;import org.gearvrf.GVRRenderData;import org.gearvrf.GVRScene;import org.gearvrf.GVRSceneObject;import org.gearvrf.GVRMain;import org.gearvrf.GVRTexture;import org.gearvrf.animation.GVRRotationByAxisAnimation;import org.gearvrf.scene_objects.GVRModelSceneObject;import org.gearvrf.scene_objects.GVRTextViewSceneObject;import org.gearvrf.util.VRTouchPadGestureDetector.SwipeDirection;import org.gearvrf.animation.GVRAnimation;import org.gearvrf.utility.Exceptions;import android.os.Environment;import android.util.Log;import android.view.Gravity;import android.view.MotionEvent;import java.io.File;import java.io.IOException;import java.util.ArrayList;public class ModelViewer2Manager extends GVRMain {    private static final String TAG = "DEBUG";	private GVRContext mGVRContext;    private GVRModelSceneObject mRoom;    private GVRModelSceneObject mRoomWithMenu;    private ArrayList<GVRModelSceneObject> allModels = null;    private ArrayList<GVRSceneObject> thumbnails =  new ArrayList<GVRSceneObject>();    private ArrayList<GVRSceneObject> currentModels = new ArrayList<GVRSceneObject>();    private ArrayList<GVRAnimation > aAnimation = new ArrayList<GVRAnimation>();    private ArrayList<String> listOfAllModels = null;    private final String mRoomPath = "room.fbx";    private GVRScene scene;    private GVRSceneObject mHeadTracker = null;    private ArrayList<String> models = null;    private boolean mIsSingleTapped = false;    private GVRModelSceneObject current = null;    private static final int gSlots = 3;    private int gStart = 0;    private String sEnvironmentPath = Environment.getExternalStorageDirectory().getPath();    private GVRModelSceneObject loadFbxFile(GVRContext gvrContext, String fbxFile){        try {            return gvrContext.loadModel(fbxFile);        }catch (IOException e) {            e.printStackTrace();        }        return null;    }    private ArrayList<GVRModelSceneObject> loadAllModels(){        ArrayList<GVRModelSceneObject> allModels = new ArrayList<GVRModelSceneObject>();        try {            // Add All the Extensions you want to load            ArrayList<String> extensions = new ArrayList<String>();            extensions.add(".fbx");            extensions.add(".3ds");            extensions.add(".dae");            // Reads the List of Files from specified folder having extension specified in extensions.            // Please place your models by creating GVRModelViewer2 folder in your internal phone memory            CardReader cRObject = new CardReader(sEnvironmentPath+"/GVRModelViewer2", extensions);            File list[] = cRObject.getModels();            // Adds all the models            GVRModelSceneObject tempModel;            GVRAnimation animation;            for (File file : list){                Log.e("FBx File", file.getAbsolutePath());                tempModel = mGVRContext.loadModelFromSD("GVRModelViewer2/"+file.getName());                tempModel.setName(file.getName().substring(0,8));                // Give Rotation Animation                animation = new GVRRotationByAxisAnimation(tempModel, 25, 360, 0, 1, 0).start(mGVRContext.getAnimationEngine());                animation.setRepeatMode(1);                animation.setRepeatCount(-1);                allModels.add(tempModel);            }            return allModels;        }catch (IOException e) {            e.printStackTrace();        }        return null;    }    private void transformAllModels(){        for(int i = 0; i < allModels.size(); i++){            allModels.get(i).getTransform().setPosition(0.0f, 95.0f, -12.0f);        }    }    private GVRTexture loadTexture(GVRContext gvrContext, String imageFile){        try {            return gvrContext.loadTexture(new GVRAndroidResource(gvrContext, imageFile));        }catch (IOException e) {            e.printStackTrace();        }        return null;    }    private void addThumbnailsAndPicker(ArrayList<GVRModelSceneObject> allModels){        float xPosition = 0.0f;        GVRTexture icon = null;        try {            icon = mGVRContext.loadTexture(new GVRAndroidResource( mGVRContext, "play-active.png"));        } catch (IOException e) {            Log.e("ERROR", "Unable to load texture");            e.printStackTrace();        }        for(GVRModelSceneObject mModel : allModels){            Log.d(TAG, "Creating Thumbnails");            GVRSceneObject temp = new GVRSceneObject(mGVRContext, mGVRContext.createQuad(1.5f, 1.5f), icon);            temp.getRenderData().getMaterial().setTexture("inactive_back", icon);            GVREyePointeeHolder playPauseHolder = new GVREyePointeeHolder(mGVRContext);            playPauseHolder.addPointee(new GVRMeshEyePointee(mGVRContext,temp.getRenderData().getMesh()));            temp.attachEyePointeeHolder(playPauseHolder);            thumbnails.add(temp);        }    }     private ArrayList<String> getListOfModels(){        ArrayList<String> allModels = new ArrayList<String>();        // Add All the Extensions you want to load        ArrayList<String> extensions = new ArrayList<String>();        extensions.add(".fbx");        extensions.add(".3ds");        // Reads the List of Files from specified folder having extension specified in extensions.        // Please place your models by creating GVRModelViewer2 folder in your internal phone memory        CardReader cRObject = new CardReader(sEnvironmentPath+"/GVRModelViewer2", extensions);        File list[] = cRObject.getModels();        // Adds all the models        for (File file : list){            //Log.e("FBx File", file.getAbsolutePath());            allModels.add(file.getName());            //noOfModels++;        }        return allModels;    }    private void addAllThumbNails(){        Log.d(TAG, "Adding all thumbnails to the Room");        int lSlots = gSlots;        int count = thumbnails.size();        float xPosition = -2.0f;        GVRAnimation animation;        for(int i = 0; i < currentModels.size(); i++) {            animation = new GVRRotationByAxisAnimation(currentModels.get(i), 2, 360, 0, 1, 0).start(mGVRContext.getAnimationEngine());            animation.setRepeatMode(1);            animation.setRepeatCount(-1);            aAnimation.add(animation);        }        try {            Thread.sleep(2000);        }catch (Exception e){}        for(int i = 0; i < currentModels.size(); i++) {            mGVRContext.getAnimationEngine().stop(aAnimation.get(i));        }        aAnimation.clear();        for(GVRSceneObject oneChild : currentModels){                mRoomWithMenu.removeChildObject(oneChild);        }        GVRTextViewSceneObject textObject;        for(int i = gStart; i < count;){            thumbnails.get(i).getTransform().setPosition(xPosition, 100.0f, -6.0f);            // Adding text for the Thumbnail            // TODO Should not create Objects again            textObject = new GVRTextViewSceneObject(mGVRContext, allModels.get(i).getName());            textObject.setGravity(Gravity.CENTER);            textObject.setTextSize(7);            textObject.getTransform().setPosition(0.0f, 0.0f, 0.2f);            textObject.getRenderData().setRenderingOrder(GVRRenderData.GVRRenderingOrder.TRANSPARENT);            thumbnails.get(i).addChildObject(textObject);            xPosition += 2.0;            mRoomWithMenu.addChildObject(thumbnails.get(i));            currentModels.add(thumbnails.get(i));            lSlots--;            i = (i + 1) % count;            gStart = i;            if(lSlots == 0){                break;            }        }    }    private GVRSceneObject getHeadTracker(){        GVRSceneObject headTracker = null;        // Head Tracker        GVRTexture headTrackerTexture = loadTexture(mGVRContext, "head-tracker.png");        headTracker = new GVRSceneObject(mGVRContext,                mGVRContext.createQuad(0.5f, 0.5f), headTrackerTexture);        headTracker.getTransform().setPositionZ(-9.0f);        headTracker.getRenderData().setRenderingOrder(                GVRRenderData.GVRRenderingOrder.OVERLAY);        headTracker.getRenderData().setDepthTest(false);        headTracker.getRenderData().setRenderingOrder(100000);        return headTracker;    }	@Override	public void onInit(GVRContext gvrContext) {		mGVRContext = gvrContext;		scene = gvrContext.getNextMainScene();        // Add Head Tracker        scene.getMainCameraRig().addChildObject(getHeadTracker());        // Load the Room model        mRoom = loadFbxFile(gvrContext, mRoomPath);        // Load all the model from SD Card        allModels = loadAllModels();        transformAllModels();         // Add Pickers and Thumbnails for each model        addThumbnailsAndPicker(allModels);        // Set Transformations        mRoom.getTransform().setPosition(0.0f, -100.0f, 0.0f);        // Add All Thumbnails        mRoomWithMenu = loadFbxFile(gvrContext, mRoomPath);        mRoomWithMenu.getTransform().setPosition(0.0f, -100.0f, 0.0f);        addAllThumbNails();        // Adding only Room to the scene        scene.addSceneObject(mRoomWithMenu);    }	@Override	public void onStep() {            boolean isSingleTapped = mIsSingleTapped;            mIsSingleTapped = false;            GVREyePointeeHolder[] pickedHolders = null;            if (pickedHolders == null) {                pickedHolders = GVRPicker.pickScene(mGVRContext.getMainScene());            }            if(isSingleTapped){                boolean closeFlag = false;                for (GVREyePointeeHolder holder : pickedHolders) {                    int index = 0;                    for(GVRSceneObject temp: thumbnails){                        if (holder.equals(temp.getEyePointeeHolder())) {                            if(current != null)                                mRoom.removeChildObject(current);                            mRoom.addChildObject(allModels.get(index));                            scene.removeSceneObject(mRoomWithMenu);                            scene.addSceneObject(mRoom);                            closeFlag = true;                            current = allModels.get(index);                            break;                        }                        index++;                    }                }                if(!closeFlag){                    scene.removeSceneObject(mRoom);                    scene.addSceneObject(mRoomWithMenu);                }            }    }    public void onSingleTap(MotionEvent e) {        Log.d(TAG, "On Single Touch Received");        mIsSingleTapped = true;    }    public void onSwipe(MotionEvent e, SwipeDirection swipeDirection,                        float velocityX, float velocityY){        if(swipeDirection ==  SwipeDirection.Forward){            addAllThumbNails();            Log.d("SWIPE", "Swipped Forward");        }        else if(swipeDirection ==  SwipeDirection.Backward){            Log.d("SWIPE", "Swipped Backward");        }        else {            Log.d("SWIPE", "Unknown Swipe");        }    }}