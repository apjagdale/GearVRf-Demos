/* Copyright 2015 Samsung Electronics Co., LTD * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.gearvrf.modelviewer2;import org.gearvrf.GVRAndroidResource;import org.gearvrf.GVRContext;import org.gearvrf.GVREyePointeeHolder;import org.gearvrf.GVRMaterial;import org.gearvrf.GVRMesh;import org.gearvrf.GVRMeshEyePointee;import org.gearvrf.GVRPicker;import org.gearvrf.GVRRenderData;import org.gearvrf.GVRScene;import org.gearvrf.GVRSceneObject;import org.gearvrf.GVRMain;import org.gearvrf.GVRTexture;import org.gearvrf.animation.GVRRotationByAxisAnimation;import org.gearvrf.scene_objects.GVRModelSceneObject;import org.gearvrf.scene_objects.GVRTextViewSceneObject;import org.gearvrf.util.VRTouchPadGestureDetector.SwipeDirection;import org.gearvrf.animation.GVRAnimation;import org.gearvrf.utility.Exceptions;import android.graphics.Color;import android.os.Environment;import android.util.Log;import android.view.Gravity;import android.view.MotionEvent;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.Scanner;public class ModelViewer2Manager extends GVRMain {    private static final String TAG = "DEBUG";    private GVRContext mGVRContext;    private GVRModelSceneObject mRoom;    private GVRModelSceneObject mRoomWithMenu;    private ArrayList<GVRModelSceneObject> allModels = null;    private ArrayList<GVRSceneObject> thumbnails = new ArrayList<GVRSceneObject>();    private ArrayList<GVRSceneObject> currentModels = new ArrayList<GVRSceneObject>();    private ArrayList<GVRAnimation> aAnimation = new ArrayList<GVRAnimation>();    private ArrayList<String> listOfAllModels = null;    private GVRTextViewSceneObject textLoading = null;    private ArrayList<GVRTextViewSceneObject> thumbnailText = new ArrayList<GVRTextViewSceneObject>();    private final String mRoomPath = "room.fbx";    private GVRScene scene;    private boolean mIsSingleTapped = false;    private GVRModelSceneObject current = null;    private static final int gSlots = 3;    private int gStart = 0;    private String sEnvironmentPath = Environment.getExternalStorageDirectory().getPath();    private GVRModelSceneObject loadFbxFile(GVRContext gvrContext, String fbxFile) {        try {            return gvrContext.loadModel(fbxFile);        } catch (IOException e) {            e.printStackTrace();        }        return null;    }    private GVRModelSceneObject loadModelWithIndex(int index) {        GVRModelSceneObject tempModel = null;        Log.d(TAG, "Call Received");        if (allModels.get(index) != null) {            Log.d(TAG, "Already loaded");            return allModels.get(index);        }        try {            Log.d(TAG, "Absent so loading" + listOfAllModels.get(index));            tempModel = mGVRContext.loadModelFromSD("GVRModelViewer2/" + listOfAllModels.get(index));            tempModel.setName(listOfAllModels.get(index).substring(0, 8));            GVRSceneObject.BoundingVolume bv = tempModel.getBoundingVolume();            Float radius = bv.radius;            Log.e(TAG,"Radius" + Float.toString(radius));            if(radius != Double.POSITIVE_INFINITY) {                float scaleFactor = 10 / radius;                tempModel.getTransform().setScale(scaleFactor, scaleFactor, scaleFactor);            }            tempModel.getTransform().setPosition(0.0f, 200.0f, 980.0f);            // Give Rotation Animation            GVRAnimation animation = new GVRRotationByAxisAnimation(tempModel, 25, 360, 0, 1, 0).start(mGVRContext.getAnimationEngine());            animation.setRepeatMode(1);            animation.setRepeatCount(-1);        } catch (IOException e) {            e.printStackTrace();        }        allModels.add(index, tempModel);        return tempModel;    }    private GVRTexture loadTexture(GVRContext gvrContext, String imageFile) {        try {            return gvrContext.loadTexture(new GVRAndroidResource(gvrContext, imageFile));        } catch (IOException e) {            e.printStackTrace();        }        return null;    }    private void createThumbnailsAndPicker(ArrayList<String> allModels) {        GVRTexture icon = null;        try {            icon = mGVRContext.loadTexture(new GVRAndroidResource(mGVRContext, "play-active.png"));        } catch (IOException e) {            Log.e("ERROR", "Unable to load texture");            e.printStackTrace();        }        for (int i = 0; i < allModels.size(); i++) {            Log.d(TAG, "Creating Thumbnails");            GVRSceneObject temp = new GVRSceneObject(mGVRContext, mGVRContext.createQuad(4.5f, 4.5f), icon);            temp.getRenderData().getMaterial().setTexture("inactive_back", icon);            GVREyePointeeHolder playPauseHolder = new GVREyePointeeHolder(mGVRContext);            playPauseHolder.addPointee(new GVRMeshEyePointee(mGVRContext, temp.getRenderData().getMesh()));            temp.attachEyePointeeHolder(playPauseHolder);            thumbnails.add(temp);        }    }    private ArrayList<String> getListOfModels() {        ArrayList<String> listOfAllModels = new ArrayList<String>();        allModels = new ArrayList<GVRModelSceneObject>();        // Add All the Extensions you want to load        ArrayList<String> extensions = new ArrayList<String>();        extensions.add(".fbx");        extensions.add(".3ds");        extensions.add(".dae");        extensions.add(".obj");        // Reads the List of Files from specified folder having extension specified in extensions.        // Please place your models by creating GVRModelViewer2 folder in your internal phone memory        CardReader cRObject = new CardReader(sEnvironmentPath + "/GVRModelViewer2", extensions);        File list[] = cRObject.getModels();        if(list == null)            return listOfAllModels;        // Adds all the models        for (File file : list) {            //Log.e("FBx File", file.getAbsolutePath());            listOfAllModels.add(file.getName());            // Just adding null for the Models count            allModels.add(null);        }        return listOfAllModels;    }    private void addAllThumbNails() {        Log.d(TAG, "Adding all thumbnails to the Room");        int lSlots = gSlots;        int count = thumbnails.size();        float xPosition = -2.0f;        GVRAnimation animation;        for (int i = 0; i < currentModels.size(); i++) {            animation = new GVRRotationByAxisAnimation(currentModels.get(i), 2, 360, 0, 1, 0).start(mGVRContext.getAnimationEngine());            //animation.setRepeatMode(1);            animation.setRepeatCount(-1);            aAnimation.add(animation);        }        for (int i = 0; i < currentModels.size(); i++) {            while(!aAnimation.get(i).isFinished()){            }        }        for (int i = 0; i < currentModels.size(); i++) {            mGVRContext.getAnimationEngine().stop(aAnimation.get(i));        }        aAnimation.clear();        for (GVRSceneObject oneChild : currentModels) {            mRoomWithMenu.removeChildObject(oneChild);        }        for (int i = gStart; i < count; ) {            thumbnails.get(i).getTransform().setPosition(xPosition, 205.0f, 980.0f);            thumbnails.get(i).addChildObject(thumbnailText.get(i));            xPosition += 6.0;            mRoomWithMenu.addChildObject(thumbnails.get(i));            currentModels.add(thumbnails.get(i));            lSlots--;            i = (i + 1) % count;            gStart = i;            if (lSlots == 0) {                break;            }        }    }    private void createTextForThumbnails() {        for (int i = 0; i < listOfAllModels.size(); i++) {            thumbnailText.add(getTextViewSceneObject((Integer.toString(i+1) + ":" +listOfAllModels.get(i)).substring(0, 8), 25, Color.GREEN, 0.0f, 0.0f, 1.0f));        }    }    private GVRSceneObject getHeadTracker() {        GVRSceneObject headTracker;        // Head Tracker        GVRTexture headTrackerTexture = loadTexture(mGVRContext, "head-tracker.png");        headTracker = new GVRSceneObject(mGVRContext,                mGVRContext.createQuad(0.5f, 0.5f), headTrackerTexture);        headTracker.getTransform().setPositionZ(-9.0f);        headTracker.getRenderData().setRenderingOrder(                GVRRenderData.GVRRenderingOrder.OVERLAY);        headTracker.getRenderData().setDepthTest(false);        headTracker.getRenderData().setRenderingOrder(100000);        return headTracker;    }    void displayCountInRoom() {        GVRTextViewSceneObject count = getTextViewSceneObject("Total Models " + String.valueOf(listOfAllModels.size()), 10, Color.BLUE, -2.0f, 207.0f, 985.0f);        mRoomWithMenu.addChildObject(count);    }    private GVRRenderData attachTexture(GVRContext context, String modelPath, String vertexShaderPath, String fragmentShaderPath){        ShaderHandler shaderHandler = new ShaderHandler(context);        GVRRenderData renderData =  new GVRRenderData(context);        GVRMesh mesh = null;        GVRMaterial material = null;        try {            String vertexShader = new Scanner(new File(vertexShaderPath)).useDelimiter("\\Z").next();;            String fragmentShader = new Scanner(new File(fragmentShaderPath)).useDelimiter("\\Z").next();;            shaderHandler.addVSandFS(vertexShader, fragmentShader);            material = new GVRMaterial(context, shaderHandler.getShaderID());            mesh = context.loadMesh(new GVRAndroidResource(context, modelPath));        }catch (IOException e) {            e.printStackTrace();            System.out.print(e);        }        renderData.setMesh(mesh);        renderData.setMaterial(material);        return  renderData;    }    @Override    public void onInit(GVRContext gvrContext) {        mGVRContext = gvrContext;        scene = gvrContext.getNextMainScene();        // Add Head Tracker        scene.getMainCameraRig().addChildObject(getHeadTracker());        scene.getMainCameraRig().getTransform().setPosition(0.0f, 200.0f, 1000.0f);        // Set the near clipping plane.        scene.getMainCameraRig().setNearClippingDistance(0.1f);        // Set the far clipping plane.        scene.getMainCameraRig().setFarClippingDistance(4500.0f);                // Load the Room model        mRoom = loadFbxFile(gvrContext, mRoomPath);        //GVRRenderData renderData = attachTexture(mGVRContext, mRoomPath, "Holo.vert", "Holo.frag");        //mRoom.attachRenderData(renderData);        // Set Transformations        mRoom.getTransform().setPosition(0.0f, 0.0f, 0.0f);        // Add Pickers, Thumbnails and Text for each model        listOfAllModels = getListOfModels();        createThumbnailsAndPicker(listOfAllModels);        createTextForThumbnails();        // Add All Thumbnails        mRoomWithMenu = loadFbxFile(gvrContext, mRoomPath);        //mRoomWithMenu.attachRenderData(renderData);        mRoomWithMenu.getTransform().setPosition(0.0f, 0.0f, 0.0f);        displayCountInRoom();        addAllThumbNails();        // Adding only Room with Menu to the scene        scene.addSceneObject(mRoomWithMenu);    }    void showLoading() {        if (textLoading == null) {            textLoading = getTextViewSceneObject("Loading", 15, Color.BLUE, -1.0f, 200.0f, 995.0f);        }        scene.removeSceneObject(mRoomWithMenu);        mRoom.addChildObject(textLoading);        scene.addSceneObject(mRoom);    }    GVRTextViewSceneObject getTextViewSceneObject(String text, int size, int color, float posX, float posY, float posZ) {        GVRTextViewSceneObject textObject = new GVRTextViewSceneObject(mGVRContext, text);        textObject.setGravity(Gravity.CENTER);        textObject.setTextSize(size);        textObject.setTextColor(color);        textObject.getTransform().setPosition(posX, posY, posZ);        textObject.getRenderData().setRenderingOrder(GVRRenderData.GVRRenderingOrder.TRANSPARENT);        return textObject;    }    @Override    public void onStep() {        boolean isSingleTapped = mIsSingleTapped;        mIsSingleTapped = false;        GVREyePointeeHolder[] pickedHolders = null;        if (isSingleTapped) {            if (pickedHolders == null) {                pickedHolders = GVRPicker.pickScene(mGVRContext.getMainScene());            }            boolean closeFlag = false;            for (GVREyePointeeHolder holder : pickedHolders) {                for(int index = 0; index < thumbnails.size(); index++){                    if (holder.equals(thumbnails.get(index).getEyePointeeHolder())) {                        if (current != null)                            mRoom.removeChildObject(current);                        Log.d(TAG, "Called Loading Model");                        showLoading();                        mRoom.addChildObject(loadModelWithIndex(index));                        mRoom.removeChildObject(textLoading);                        Log.d(TAG, "Loading Done");                        scene.addSceneObject(mRoom);                        closeFlag = true;                        current = allModels.get(index);                        break;                    }                }            }            if (!closeFlag) {                scene.removeSceneObject(mRoom);                scene.addSceneObject(mRoomWithMenu);            }        }    }    public void onSingleTap(MotionEvent e) {        Log.d(TAG, "On Single Touch Received");        mIsSingleTapped = true;    }    public void onSwipe(MotionEvent e, SwipeDirection swipeDirection,                        float velocityX, float velocityY) {        if (swipeDirection == SwipeDirection.Forward) {            addAllThumbNails();            Log.d("SWIPE", "Swipped Forward");        } else if (swipeDirection == SwipeDirection.Backward) {            Log.d("SWIPE", "Swipped Backward");        } else {            Log.d("SWIPE", "Unknown Swipe");        }    }}